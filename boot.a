; ACME 0.96.4
; boot.a - Minimal version
; boot0 (T0/S0) / boot1 (FLOAD) / boot2 (MAIN) 
; by Grouik/French Touch and fenarinarsa/French Touch
;
; needs DISK II card in SLOT #6
; 
; 0.04

!cpu 6502
!convtab "a2txti.bin"    ; incorporation table caractère APPLE II (normal) invert


; =============================================================================
; HARDWARE REQUIREMENTS
; Autodection setup

REQ_IIe = 0     ; 0 = IIc allowed / 1 = IIe required  (II/II+/IIgs will never pass)
REQ_PAL = 0     ; 0 = 60Hz allowed / 1 = 50Hz required
REQ_65C02 = 0   ; 0 = 6502 allowed / 1 = 65C02 required

; =============================================================================
; ZEROPAGE
; -------------------------------------
; USED IN ALL PARTS
bCPU        = $01
bSLOT       = $02   ; numero SLOT * 0x10
bIIc_detect = $200 
     
; FAST LOAD
PISDEP   	= $0A   ; PISTE DE DEPART
SECDEP   	= $0B   ; SECTEUR DE DEPART
BUFFER   	= $0C 	; Buffer LOW+HIGH ; + $0D
TOTSEC   	= $0E	; TOTAL DES SECTEURS A CHARGER
CURTRK1  	= $0F	; piste de départ DRIVE 1 - A INITIALISER A ZERO pour le premier appel !

; -------------------------------------
; PART SPECIFIC
; Temp
OUT2        = $12   ; +$13
Temp        = $FF
; =============================================================================
; CONSTANTES SYSTEME
VERTBLANK   = $C019 ;
; -------------------------------------
; CONSTANTES
MAIN        = $1000     ; main program to run once boot.b is done
FLOAD       = $FC00     ; where to put the FLOAD routine
; -------------------------------------

        *= $800 ; ORG = $800

!byte 02        ; reserved byte: number of 256 bytes sectors to load for boot.b

START
!zone

; here the floppy drive motor is running, x = 60 (if slot 6)

	; $801/$802/$803
	JMP INIT		; first run, we do all the init sequence
	; BOOT 1 (FLOAD)    
	DEC OffHi		;                                                             
LOAD    LDA OffHi
	CMP #(>FLOAD-1)	; are we done? 
	BEQ +
	STA $27
	LDA nSector	; n Sectors
	STA $3D
MODSLOT	JMP $C65C       ; reading with the Disk II ROM 
                        ; the ROM rout ends with a JMP $801
			; /!\ using ZP $26,$27,$2B,$3C,$3D,$40,$41       
+


	; BOOT 2 (MAIN)
        ; LOADING DEMO WITH FLOAD. TRACK 1 SECTOR 0
	LDX #$00                
	STX SECDEP	; sector
	STX CURTRK1
	STX BUFFER	; buffer low = $00
	INX		; = 1
	STX PISDEP	; track 
	LDA #>MAIN	; 
	STA BUFFER+1	; buffer high = $D00
	LDA #36		; # of sectors to load
	STA TOTSEC              
	JSR FLOAD	; loading
	
	JMP MAIN	; saut Boot 2. Voilà c'est fini !                                        

INIT    STX bSLOT       ; on sauvegarde le numero du SLOT*0x10

        JSR $FC58       ; HOME (ROM)

        ; Text
        LDX #39
-       LDA TEXT,X
        STA $400,X
        DEX
        BPL -
        ; jingle / Tribute to 'Déplombage Mode d'Emploi' / Godfather (code from DPME III)
        LDY #$D0
-       BIT $C030
        LDA #$09
        JSR $FCA8
        DEY
        BNE -
        LDX #02
        STX $FF
--      LDY #$D0
-       BIT $C030
MODJING LDA #$07
        JSR $FCA8
        DEY
        BNE -
        LDA #$05
        STA MODJING+1
        DEC $FF
        BNE --
        ; ---------------------

        ; APPLE II MODEL DETECTION
        LDX #'A'
        LDA $FBB3
        CMP #$06                ; IIe/IIc/IIGS = 06 
        BEQ +
-       JMP BADGUY  	        ; sinon II ($38) ou II+ ($EA) => bad guy1
+       ; IIc ?

        LDA $FBC0               ; détection IIc
        STA bIIc_detect         ; for main.a
!if REQ_IIe=1 {
        BEQ -                   ; 0 = IIc => bad guy2
}
        ; IIgs ou IIe ? 
        SEC
        JSR $FE1F               ; TEST GS 
        BCS +
        JMP BADGUY              ; si Carry not set IIGS => bad guy3
+

        ; MOCKINGBOARD DETECTION (->OUT2)
        LDA #$FF
        STA $C403       ; activate MB 4c (IIc)
        STA $C404

        LDA #00
        STA OUT2          
bdet    LDA #$07                ; on commence en $C7 jusqu'en $C1
        ORA #$C0                ; -> $Cx
        STA OUT2+1
        LDY #04                 ; $CX04
        LDA (OUT2),Y            ; timer 6522 (Low Order Counter) - attention compte à rebour !
        STA Temp                ; 3 cycles
        LDA (OUT2),Y            ; + 5 cycles = 8 cycles entre les deux accès au timer
        SEC                     ; 
        SBC Temp                ; 
        CMP #$F8                ; -8 (compte à rebour) ?
        BEQ +
        DEC bdet+1              ; on décrémente le "slot" pour tester le suivant
        BNE bdet                ; on boucle de 7 à 1
        LDX #'M'
        JMP BADGUY              ; on est arrivé au SLOT0 donc pas de MB!
+

        ; 65C02 CPU DETECTION
        LDA #0
        STA bCPU
        LDX #'C'
        SED             ; BCD mode
        LDA #$99
        CLC
        ADC #$01
 !if REQ_65C02=1 {
        BMI BADGUY      ; 6502
 }
        BMI +
        INC bCPU
+       CLD             ; binary mode

        ; LOADING fload.b FROM DISK

        LDA $C083
	LDA $C083		; write/read to RAM bank2 (Langage Card)

	LDA #$CE	; on écrit DEC nSector en $801 
	STA $801	; pour que le JMP $801 en fin de routine
	LDA #<nSector	; en $C605
	STA $802	; fasse une boucle avec le code en $801
	LDA #>nSector	;
	STA $803
	LDX #$60	; SLOT#6*$10
	JMP LOAD	; FLOAD call (will return at $801)

BADGUY  STX $403        ; Error code. A=Apple II model, C=CPU, M=Mockingboard
        LDA #'K'
        STA $400
        LDA #'O'
        STA $401
-       BNE -             ; stopping here


TEXT 		!text ":             FRENCH TOUCH             :",00

OffHi       !byte 0xFF    ; offset dernier secteur pour lecture BOOT1 (FLOAD)
nSector     !byte 0x05    ; n du dernier sector à lire (ordre inverse) pour BOOT1 (FLOAD)
COUNTREF    !byte 0x00  ; compteur routine detect refresh
